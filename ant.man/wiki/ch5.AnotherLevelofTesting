# 5장 다른레벨의테스팅
테스트를 돕는 다른 프로세스 보기

## 5.1 integration test (통합테스트)
- unit test:
- integration test:
  - 각각의 인터페이스 사용
  - end to end 통합
  - 예상되는 입력과 출력 통합 케이스 사례 만들기
  - 테스트를 평가하여 결과가 일치하는지 판별하고 결과를 기록

- function test
  - 검증 하는 것 (아마도 메소드만 검증이라 이런 표현)
  - 블랙 박스 테스트 유형 -> 입출력에 대해 기능적으로 테스트 됨
- acceptance testing
  - 최종 고객에게 더 중점을 둠
  - 경우에 따라 고객이 이 테스트에 참여 (실제 환경과 실 시스템에서 수행)
  - 각 사용자 요구 사항은 객관성, 구현, 오류 처리 및 사용자 요구에 따른 기타 세부 사항에 중점을 둔 테스트 사례를 사용하여 테스트

- acceptance testing에서 필요한 점
  - 고객관점에서는 개발자와 QA와는 항상 차이있음 -> 테스트 전 이러한 불일치를 확인해야함
    - 비지니스 요구사항 분석
    - 테스트 계획 작성
    - 테스트 시나리오 식별
    - 테스트 데이터 (실환경)
    - 테스트 실행 및 기록

## 5.2 BDD (행동중심개발)
 - BDD는 가장 중요한 일에 큰 노력을 집중 시키려고 노력
 - 최대 비즈니스 가치를 유지하는 기능을 객관적으로 보고 가장 비용 효율적인 방식으로 제공하는 것을 목표로 함

 - Three amigos (세친구)
  - BDD의 핵심은 고객, 개발자 및 테스터가 처음부터 끝까지 참여하는 것
  - 세 명이 함께 앉아서 모든면에서 이해할 수있는 공통 언어 (유비쿼터스 언어)를 정의
  - 모든 요구 사항이 이 언어로 번역되고 개발은 이 번역된 기능에 의해 개발된다는 전제에서 시작
    - 고객은 비즈니스 지식과 기능이 무엇을 원하는지에 대한 명확한 아이디어를 제공
    - 개발자는 기술 전문 지식을 도입하여 고객의 기대와 전반적인 응용 프로그램 설계를 조정 (고객의 말도 안되는 믿음 제거)
    - QA는 고객의 요구 사항과 개발자의 기술 사양을 쉽게 테스트하고 확인할 수있는 형식으로 만드는 데 기여
 - Bird's-eye view of BDD
  - 고객 -> 분석가 -> 개발자 -> QA 를 거치며 많은 정보가 사라짐 (잘못 전달 및 잘못된 이해 등)
  - 이를 해결하기 위해 분석가/개발/QA 셋이 모두 이해할 수 있는 언어로 요구사항 작성 (이 언어를 "Gherkin"라 함)
    - 개발자는 이러한 시나리오를 일련의 자동화 테스트로 전환 (기능의 경계와 요구 사항을 표시하며 기능이 완료되었는지 확인하는 데 사용)
    - 유비쿼터스 언어로 작성된 이러한 시나리오는 문서 역할을하며 제품과 함께 많은 문서가 필요하지 않음

<reference>
 - https://cucumber.io/
 - http://jbehave.org/

 - Given: 전제조건 설명. 테스트 환경 준비하거나 데이터 준비
 - When: 행위가 행동을 설명
 - Then: 예상했던 행위나 결과 설명

 - Gherkin 작성된 기능은 실행 가능한 사양을 정의해야 함. 단계를 정의했다면 실행가능한 코드여야 함
  - 실제 단계는 단위테스트라기 보단 자연 언어에 가깝게..
## 5.3 Talk is cheap

https://cucumber.io/docs/guides/
https://github.com/cucumber/cucumber-jvm-scala









#
